<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd"
	>
    <description>spring 公共配置</description>
	<context:component-scan base-package="com.elementspeed">
		<!-- <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/> -->
		<!-- <context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/> -->
		<!-- <context:include-filter type="annotation" expression="org.springframework.stereotype.Repository" /> -->
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
	</context:component-scan>
	<aop:aspectj-autoproxy />
	<bean id="ysqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:config/mybatis/MyBatis-Configuration.xml"></property>
		<property name="dataSource" ref="dataSource" />
		<!-- 自动分页插件pageHelper需要设置该属性 -->
		<property name="typeAliasesPackage" value="com.isea533.ssm.model" />
	</bean>
    <!-- 自动扫描所有com.elementspeed.mapper下的dao -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" autowire="byName">
   		<property name="basePackage" value="com.elementspeed.mapper,com.elementspeed.**.mapper" />
		<property name="sqlSessionFactoryBeanName" value="ysqlSessionFactory" />
	</bean>
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!--配置事务处理策略，transaction-manager属性指定事务管理器。 若事务管理器bean的id即为transactionManager，则 transaction-manager的属性可以不指定 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!--所有以find开头的方法都是只读的 -->
			<tx:method name="find*,get*,search*" read-only="true" />
			<!--其他方法使用默认事务策略 -->
			<tx:method name="*" propagation="REQUIRED"/>
		</tx:attributes>
	</tx:advice>
	<!-- AOP配置 -->
	<aop:config>
		<aop:pointcut id="transactionPointcut" expression="execution(* com.elementspeed..service*..*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="transactionPointcut" />
	</aop:config>
	<!-- 单号生成器 -->
	<tx:advice id="txAdvice_SnGenerator" transaction-manager="transactionManager">
		<tx:attributes>
			<!--所有以find开头的方法都是只读的 -->
			<tx:method name="find*,get*,search*" read-only="true" />
			<!--其他方法使用默认事务策略 -->
			<tx:method name="*" propagation="REQUIRES_NEW" rollback-for="Exception"/>
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="transactionPointcut_SnGenerator" expression="execution(* com.elementspeed.framework.common.sn.generator..service*..*(..))" />
		<aop:advisor advice-ref="txAdvice_SnGenerator" pointcut-ref="transactionPointcut_SnGenerator" />
	</aop:config>
	<!-- production环境 -->
    <beans profile="production">
    	<context:property-placeholder ignore-unresolvable="true"  
    	location="classpath*:/prop/jdbc.properties"/>
    	<!-- 数据源配置, 使用Tomcat JDBC连接池 -->
    	<bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource" destroy-method="close">
    		<!-- Connection Info -->
    		<property name="driverClassName" value="${jdbc.driver}"></property>
    		<property name="url" value="${jdbc.url}"></property>
    		<property name="username" value="${jdbc.username}"></property>
    		<property name="password" value="${jdbc.password}"></property>
    		<!-- Connection Pooling Info -->
    		<property name="maxActive" value="${jdbc.pool.maxActive}"></property>
    		<property name="maxIdle" value="${jdbc.pool.maxIdle}"></property>
    		<property name="minIdle" value="${jdbc.pool.minIdle}"></property>
    		<property name="defaultAutoCommit" value="false"></property>
    		<property name="minEvictableIdleTimeMillis" value="300000"/>
			<property name="numTestsPerEvictionRun" value="${jdbc.pool.maxActive}" />
			<property name="testOnBorrow" value="false" />
			<property name="testWhileIdle" value="true" />
			<property name="testOnReturn" value="false" />
			<property name="validationQuery" value="SELECT 1" />
			<!-- 数据源配置,使用应用服务器的数据库连接池 -->
			<!--<jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/ExampleDB" />-->
    	</bean>
    	<!-- 初始化数据表结构 -->
		<!-- <jdbc:initialize-database data-source="dataSource" ignore-failures="ALL"> -->
		<!-- 	<jdbc:script location="classpath:sql/${db.type}/init/init-*.sql"/> -->
		<!-- </jdbc:initialize-database> -->
    </beans>
   	<!-- local development环境 -->
   	<beans profile="development">
   		<context:property-placeholder ignore-unresolvable="true" 
   		location="classpath*:/prop/jdbc.development.properties"/>
    	<!-- 数据源配置, 使用Tomcat JDBC连接池 -->
    	<bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource" destroy-method="close">
    		<!-- Connection Info -->
    		<property name="driverClassName" value="${jdbc.driver}"></property>
    		<property name="url" value="${jdbc.url}"></property>
    		<property name="username" value="${jdbc.username}"></property>
    		<property name="password" value="${jdbc.password}"></property>
    		<!-- Connection Pooling Info -->
    		<property name="maxActive" value="${jdbc.pool.maxActive}"></property>
    		<property name="maxIdle" value="${jdbc.pool.maxIdle}"></property>
    		<property name="minIdle" value="${jdbc.pool.minIdle}"></property>
    		<property name="defaultAutoCommit" value="false"></property>
	    	<!-- 数据源配置,使用应用服务器的数据库连接池 -->
			<!--<jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/ExampleDB" />-->
    	</bean>  	
   	</beans>
   	<!-- functional test 环境 -->
   	<beans profile="functional">
		<context:property-placeholder ignore-unresolvable="true" location="classpath*:/prop/jdbc.functional.properties" />	
		<bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource" destroy-method="close">
    		<!-- Connection Info -->
    		<property name="driverClassName" value="${jdbc.driver}"></property>
    		<property name="url" value="${jdbc.url}"></property>
    		<property name="username" value="${jdbc.username}"></property>
    		<property name="password" value="${jdbc.password}"></property>
    		<!-- Connection Pooling Info -->
    		<property name="maxActive" value="${jdbc.pool.maxActive}"></property>
    		<property name="maxIdle" value="${jdbc.pool.maxIdle}"></property>
    		<property name="minIdle" value="${jdbc.pool.minIdle}"></property>
    		<property name="defaultAutoCommit" value="false"></property>
	    	<!-- 数据源配置,使用应用服务器的数据库连接池 -->
			<!--<jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/ExampleDB" />-->
    	</bean>  	
   	</beans>  
   	
</beans>